{"ast":null,"code":"/* 根据 `questionId` 获取对应的 `questionDetail` */\nexport async function getQueDetails(questionId) {\n  const url = `http://localhost:1337/api/quests/${questionId}`;\n  try {\n    const resp = await fetch(url);\n    if (!resp.ok) {\n      throw new Error(`获取数据失败: ${resp.status}`);\n    }\n    const questionDetails = await resp.json();\n    const questionType = questionDetails.data.type;\n    switch (questionType) {\n      case 'text':\n      case 'location':\n        {\n          return {\n            title: questionDetails.data.title,\n            type: questionType,\n            index: questionDetails.data.index\n          };\n        }\n      case 'single':\n      case 'checkbox':\n        {\n          return {\n            title: questionDetails.data.title,\n            type: questionType,\n            options: questionDetails.data.options,\n            index: questionDetails.data.index\n          };\n        }\n      case 'rating':\n      case 'slider':\n        {\n          return {\n            title: questionDetails.data.title,\n            type: questionType,\n            max: questionDetails.data.max,\n            step: questionDetails.data.step,\n            index: questionDetails.data.index\n          };\n        }\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}","map":{"version":3,"names":["getQueDetails","questionId","url","resp","fetch","ok","Error","status","questionDetails","json","questionType","data","type","title","index","options","max","step","err","console","error"],"sources":["E:/Desktop/桌面/工作/编程/前端/projext/project/src/utils/getQueDetails.js"],"sourcesContent":["/* 根据 `questionId` 获取对应的 `questionDetail` */\r\nexport async function getQueDetails(questionId) {\r\n\tconst url = `http://localhost:1337/api/quests/${questionId}`;\r\n\ttry {\r\n\t\tconst resp = await fetch(url);\r\n\t\tif (!resp.ok) {\r\n\t\t\tthrow new Error(`获取数据失败: ${resp.status}`);\r\n\t\t}\r\n\t\tconst questionDetails = await resp.json();\r\n\t\tconst questionType = questionDetails.data.type;\r\n\t\tswitch (questionType) {\r\n\t\t\tcase 'text':\r\n\t\t\tcase 'location': {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttitle: questionDetails.data.title,\r\n\t\t\t\t\ttype: questionType,\r\n\t\t\t\t\tindex: questionDetails.data.index\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tcase 'single':\r\n\t\t\tcase 'checkbox': {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttitle: questionDetails.data.title,\r\n\t\t\t\t\ttype: questionType,\r\n\t\t\t\t\toptions: questionDetails.data.options,\r\n\t\t\t\t\tindex: questionDetails.data.index\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tcase 'rating':\r\n\t\t\tcase 'slider': {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttitle: questionDetails.data.title,\r\n\t\t\t\t\ttype: questionType,\r\n\t\t\t\t\tmax: questionDetails.data.max,\r\n\t\t\t\t\tstep: questionDetails.data.step,\r\n\t\t\t\t\tindex: questionDetails.data.index\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.error(err);\r\n\t\treturn null;\r\n\t}\r\n}"],"mappings":"AAAA;AACA,OAAO,eAAeA,aAAaA,CAACC,UAAU,EAAE;EAC/C,MAAMC,GAAG,GAAG,oCAAoCD,UAAU,EAAE;EAC5D,IAAI;IACH,MAAME,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IAC7B,IAAI,CAACC,IAAI,CAACE,EAAE,EAAE;MACb,MAAM,IAAIC,KAAK,CAAC,WAAWH,IAAI,CAACI,MAAM,EAAE,CAAC;IAC1C;IACA,MAAMC,eAAe,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IACzC,MAAMC,YAAY,GAAGF,eAAe,CAACG,IAAI,CAACC,IAAI;IAC9C,QAAQF,YAAY;MACnB,KAAK,MAAM;MACX,KAAK,UAAU;QAAE;UAChB,OAAO;YACNG,KAAK,EAAEL,eAAe,CAACG,IAAI,CAACE,KAAK;YACjCD,IAAI,EAAEF,YAAY;YAClBI,KAAK,EAAEN,eAAe,CAACG,IAAI,CAACG;UAC7B,CAAC;QACF;MACA,KAAK,QAAQ;MACb,KAAK,UAAU;QAAE;UAChB,OAAO;YACND,KAAK,EAAEL,eAAe,CAACG,IAAI,CAACE,KAAK;YACjCD,IAAI,EAAEF,YAAY;YAClBK,OAAO,EAAEP,eAAe,CAACG,IAAI,CAACI,OAAO;YACrCD,KAAK,EAAEN,eAAe,CAACG,IAAI,CAACG;UAC7B,CAAC;QACF;MACA,KAAK,QAAQ;MACb,KAAK,QAAQ;QAAE;UACd,OAAO;YACND,KAAK,EAAEL,eAAe,CAACG,IAAI,CAACE,KAAK;YACjCD,IAAI,EAAEF,YAAY;YAClBM,GAAG,EAAER,eAAe,CAACG,IAAI,CAACK,GAAG;YAC7BC,IAAI,EAAET,eAAe,CAACG,IAAI,CAACM,IAAI;YAC/BH,KAAK,EAAEN,eAAe,CAACG,IAAI,CAACG;UAC7B,CAAC;QACF;IACD;EACD,CAAC,CAAC,OAAOI,GAAG,EAAE;IACbC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,IAAI;EACZ;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}