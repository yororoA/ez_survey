{"ast":null,"code":"/* 提交问卷, await直接调用\r\n* @return bool_promise 是否提交成功\r\n* @accept`surveyId`: 填写的问卷id */\nexport async function updateAnswer(surveyId) {\n  // 用户id\n  const clientId = localStorage.getItem('token');\n  // 获取sessionStorage中的问题答案信息\n  const nums = sessionStorage.length;\n  const answers = [];\n  for (let i = 0; i < nums; i++) {\n    const key = sessionStorage.key(i);\n    const data = JSON.parse(sessionStorage.getItem(key));\n    answers.push({\n      answer: {\n        value: data.answer\n      },\n      // 将 answer 包裹在对象中, 避免数据库解析时因使用 split 而无法读取\n      questionType: data.questionType,\n      index: data.index\n    });\n  }\n  console.log(answers);\n  // 更新Answer中的反馈信息, 由于在 strapi 中使用的 answers 为重复组件, 在上传时为便于后续查询, 必须携带 ?populate, 且后续查询时也应携带该参数\n  const postResp = await fetch('http://localhost:1337/api/answers?populate=answers', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: {\n        surveyId,\n        clientId,\n        answers\n      }\n    })\n  });\n  if (!postResp.ok) {\n    alert(`${postResp.status}: 提交失败(保存阶段)`);\n    return false;\n  }\n  const q = await postResp.json();\n  console.log(q);\n  const answerId = q.data.documentId;\n  // 获取对应survey已有的Answer\n  const getBondedResp = await fetch(`http://localhost:1337/api/surveys/${surveyId}`);\n  if (!getBondedResp.ok) {\n    alert(`${getBondedResp.status}: 提交失败(绑定问卷阶段)`);\n    return null;\n  }\n  const survey = await getBondedResp.json();\n  const boundedAnswers = survey.data.answers == null || survey.data.answers.length === 0 ? [] : [...survey.data.answers];\n  // 将该Answer绑定给对应的survey\n  const bondToSurveResp = await fetch(`http://localhost:1337/api/surveys/${surveyId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": 'application/json'\n    },\n    body: JSON.stringify({\n      data: {\n        answers: [...boundedAnswers, answerId]\n      }\n    })\n  });\n  if (!bondToSurveResp.ok) {\n    alert(`${bondToSurveResp.status}: 提交失败(绑定问卷阶段)`);\n    return null;\n  }\n  // 将Answer绑定给发布问卷的用户\n  const publisherId = survey.data.clientId;\n}","map":{"version":3,"names":["updateAnswer","surveyId","clientId","localStorage","getItem","nums","sessionStorage","length","answers","i","key","data","JSON","parse","push","answer","value","questionType","index","console","log","postResp","fetch","method","headers","body","stringify","ok","alert","status","q","json","answerId","documentId","getBondedResp","survey","boundedAnswers","bondToSurveResp","publisherId"],"sources":["E:/Desktop/桌面/工作/编程/前端/projext/project/src/utils/updateAnswer.js"],"sourcesContent":["/* 提交问卷, await直接调用\r\n* @return bool_promise 是否提交成功\r\n* @accept`surveyId`: 填写的问卷id */\r\nexport async function updateAnswer(surveyId) {\r\n\t// 用户id\r\n\tconst clientId = localStorage.getItem('token');\r\n\t// 获取sessionStorage中的问题答案信息\r\n\tconst nums = sessionStorage.length;\r\n\tconst answers = [];\r\n\tfor (let i = 0; i < nums; i++) {\r\n\t\tconst key = sessionStorage.key(i);\r\n\t\tconst data = JSON.parse(sessionStorage.getItem(key));\r\n\t\tanswers.push({\r\n\t\t\tanswer: {value: data.answer}, // 将 answer 包裹在对象中, 避免数据库解析时因使用 split 而无法读取\r\n\t\t\tquestionType: data.questionType,\r\n\t\t\tindex: data.index\r\n\t\t})\r\n\t}\r\n\tconsole.log(answers);\r\n\t// 更新Answer中的反馈信息, 由于在 strapi 中使用的 answers 为重复组件, 在上传时为便于后续查询, 必须携带 ?populate, 且后续查询时也应携带该参数\r\n\tconst postResp = await fetch('http://localhost:1337/api/answers?populate=answers', {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tdata: {\r\n\t\t\t\tsurveyId,\r\n\t\t\t\tclientId,\r\n\t\t\t\tanswers\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n\tif (!postResp.ok) {\r\n\t\talert(`${postResp.status}: 提交失败(保存阶段)`);\r\n\t\treturn false;\r\n\t}\r\n\tconst q = await postResp.json();\r\n\tconsole.log(q);\r\n\tconst answerId = q.data.documentId;\r\n\t// 获取对应survey已有的Answer\r\n\tconst getBondedResp = await fetch(`http://localhost:1337/api/surveys/${surveyId}`);\r\n\tif (!getBondedResp.ok) {\r\n\t\talert(`${getBondedResp.status}: 提交失败(绑定问卷阶段)`);\r\n\t\treturn null;\r\n\t}\r\n\tconst survey = await getBondedResp.json();\r\n\tconst boundedAnswers = (survey.data.answers == null || survey.data.answers.length === 0) ? [] : [...survey.data.answers];\r\n\t// 将该Answer绑定给对应的survey\r\n\tconst bondToSurveResp = await fetch(`http://localhost:1337/api/surveys/${surveyId}`, {\r\n\t\tmethod: \"PUT\",\r\n\t\theaders: {\"Content-Type\": 'application/json'},\r\n\t\tbody: JSON.stringify({data: {answers: [...boundedAnswers, answerId]}})\r\n\t});\r\n\tif (!bondToSurveResp.ok) {\r\n\t\talert(`${bondToSurveResp.status}: 提交失败(绑定问卷阶段)`);\r\n\t\treturn null;\r\n\t}\r\n\t// 将Answer绑定给发布问卷的用户\r\n\tconst publisherId = survey.data.clientId;\r\n\r\n}"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,eAAeA,YAAYA,CAACC,QAAQ,EAAE;EAC5C;EACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC9C;EACA,MAAMC,IAAI,GAAGC,cAAc,CAACC,MAAM;EAClC,MAAMC,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;IAC9B,MAAMC,GAAG,GAAGJ,cAAc,CAACI,GAAG,CAACD,CAAC,CAAC;IACjC,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACP,cAAc,CAACF,OAAO,CAACM,GAAG,CAAC,CAAC;IACpDF,OAAO,CAACM,IAAI,CAAC;MACZC,MAAM,EAAE;QAACC,KAAK,EAAEL,IAAI,CAACI;MAAM,CAAC;MAAE;MAC9BE,YAAY,EAAEN,IAAI,CAACM,YAAY;MAC/BC,KAAK,EAAEP,IAAI,CAACO;IACb,CAAC,CAAC;EACH;EACAC,OAAO,CAACC,GAAG,CAACZ,OAAO,CAAC;EACpB;EACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,EAAE;IAClFC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;MACpBf,IAAI,EAAE;QACLV,QAAQ;QACRC,QAAQ;QACRM;MACD;IACD,CAAC;EACF,CAAC,CAAC;EACF,IAAI,CAACa,QAAQ,CAACM,EAAE,EAAE;IACjBC,KAAK,CAAC,GAAGP,QAAQ,CAACQ,MAAM,cAAc,CAAC;IACvC,OAAO,KAAK;EACb;EACA,MAAMC,CAAC,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC/BZ,OAAO,CAACC,GAAG,CAACU,CAAC,CAAC;EACd,MAAME,QAAQ,GAAGF,CAAC,CAACnB,IAAI,CAACsB,UAAU;EAClC;EACA,MAAMC,aAAa,GAAG,MAAMZ,KAAK,CAAC,qCAAqCrB,QAAQ,EAAE,CAAC;EAClF,IAAI,CAACiC,aAAa,CAACP,EAAE,EAAE;IACtBC,KAAK,CAAC,GAAGM,aAAa,CAACL,MAAM,gBAAgB,CAAC;IAC9C,OAAO,IAAI;EACZ;EACA,MAAMM,MAAM,GAAG,MAAMD,aAAa,CAACH,IAAI,CAAC,CAAC;EACzC,MAAMK,cAAc,GAAID,MAAM,CAACxB,IAAI,CAACH,OAAO,IAAI,IAAI,IAAI2B,MAAM,CAACxB,IAAI,CAACH,OAAO,CAACD,MAAM,KAAK,CAAC,GAAI,EAAE,GAAG,CAAC,GAAG4B,MAAM,CAACxB,IAAI,CAACH,OAAO,CAAC;EACxH;EACA,MAAM6B,eAAe,GAAG,MAAMf,KAAK,CAAC,qCAAqCrB,QAAQ,EAAE,EAAE;IACpFsB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAC,cAAc,EAAE;IAAkB,CAAC;IAC7CC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;MAACf,IAAI,EAAE;QAACH,OAAO,EAAE,CAAC,GAAG4B,cAAc,EAAEJ,QAAQ;MAAC;IAAC,CAAC;EACtE,CAAC,CAAC;EACF,IAAI,CAACK,eAAe,CAACV,EAAE,EAAE;IACxBC,KAAK,CAAC,GAAGS,eAAe,CAACR,MAAM,gBAAgB,CAAC;IAChD,OAAO,IAAI;EACZ;EACA;EACA,MAAMS,WAAW,GAAGH,MAAM,CAACxB,IAAI,CAACT,QAAQ;AAEzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}