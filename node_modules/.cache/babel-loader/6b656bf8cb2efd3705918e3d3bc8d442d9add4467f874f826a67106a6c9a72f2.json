{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// 创建用户相关数据api对象\nconst userApi = createApi({\n  reducerPath: 'userApis',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:1337/api/'\n    // prepareHeaders: ,\n  }),\n  endpoints(build) {\n    return {\n      // 注册\n      registerUser: build.mutation({\n        query(user) {\n          return {\n            url: 'clients',\n            method: 'POST',\n            body: {\n              data: user.attributes\n            }\n          };\n        }\n      }),\n      // 查询用户\n      findUser: build.query({\n        query(token) {\n          return `clients/${token}`;\n        },\n        transformResponse(baseQueryReturnValue, meta, arg) {\n          // console.log(baseQueryReturnValue)\n          return baseQueryReturnValue;\n        }\n      }),\n      // 更新用户\n      updateUser: build.mutation({\n        query() {}\n      }),\n      //\t创建问题\n      createQue: build.mutation({\n        query(que) {\n          return {\n            url: 'quests',\n            method: 'POST',\n            body: {\n              data: que.attributes\n            }\n          };\n        }\n      }),\n      // 修改问题\n      updateQue: build.mutation({\n        query(documentId, que) {\n          return {\n            url: `quests/${documentId}`,\n            method: 'PUT',\n            body: {\n              data: que.attributes\n            }\n          };\n        }\n      }),\n      // 删除问题\n      delQue: build.mutation({\n        query(documentId) {\n          return {\n            url: `quests/${documentId}`,\n            method: 'DELETE'\n          };\n        }\n      }),\n      // 创建问卷\n      saveSurvey: build.mutation({\n        query(survey) {\n          return {\n            url: 'surveys',\n            method: 'POST',\n            body: {\n              data: survey.attributes\n            }\n          };\n        }\n      }),\n      // 更新问卷\n      updateSurvey: build.mutation({\n        query(survey) {\n          const surveyId = sessionStorage.getItem('tempSurveyToken');\n          return {\n            url: `surveys/${surveyId}`,\n            method: 'PUT',\n            body: {\n              data: survey.attributes\n            }\n          };\n        }\n      })\n    };\n  }\n});\n\n// 暴露钩子函数\nexport const {\n  useRegisterUserMutation,\n  useFindUserQuery,\n  useCreateQueMutation,\n  useUpdateQueMutation,\n  useDelQueMutation,\n  useSaveSurveyMutation,\n  useUpdateSurveyMutation\n} = userApi;\nexport default userApi;\nexport async function updateUser(updateElement, newElement) {\n  const clientDocumentId = localStorage.getItem('token');\n  const url = `http://localhost:1337/api/clients/${clientDocumentId}`;\n  // 先获取用户数据\n  const data = await async function () {\n    try {\n      const resp = await fetch(url);\n      if (!resp.ok) {\n        throw new Error(`获取数据失败: ${resp.status}`);\n      }\n      return await resp.json();\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }();\n  console.log(data);\n  // 更新用户数据\n  switch (updateElement) {\n    case 'username':\n    case 'pwd':\n      {\n        try {\n          const resp = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            // 仅更新需要更新的数据\n            body: JSON.stringify({\n              data: {\n                [updateElement]: newElement\n              }\n            })\n          });\n          if (!resp.ok) {\n            throw new Error(`更新 ${updateElement} 失败: ${resp.status}`);\n          }\n          const updated = await resp.json();\n          console.log('更新用户数据成功', updated);\n        } catch (err) {\n          console.error(err);\n        }\n        break;\n      }\n    case 'surveys':\n    case 'answers':\n      {\n        var _data$data;\n        const last = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data[updateElement];\n        const lastNull = last == null;\n        try {\n          const resp = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            // 根据原本是否有数据进行更新\n            body: JSON.stringify({\n              data: {\n                [updateElement]: !lastNull ? [...last, newElement] : [newElement]\n              }\n            })\n          });\n          if (!resp.ok) {\n            throw new Error(`更新 ${updateElement} 失败: ${resp.status}`);\n          }\n          const updated = await resp.json();\n          console.log('更新用户数据成功', updated);\n        } catch (err) {\n          console.error(err);\n        }\n        break;\n      }\n  }\n}","map":{"version":3,"names":["createApi","fetchBaseQuery","userApi","reducerPath","baseQuery","baseUrl","endpoints","build","registerUser","mutation","query","user","url","method","body","data","attributes","findUser","token","transformResponse","baseQueryReturnValue","meta","arg","updateUser","createQue","que","updateQue","documentId","delQue","saveSurvey","survey","updateSurvey","surveyId","sessionStorage","getItem","useRegisterUserMutation","useFindUserQuery","useCreateQueMutation","useUpdateQueMutation","useDelQueMutation","useSaveSurveyMutation","useUpdateSurveyMutation","updateElement","newElement","clientDocumentId","localStorage","resp","fetch","ok","Error","status","json","err","console","error","log","headers","JSON","stringify","updated","_data$data","last","lastNull"],"sources":["E:/Desktop/桌面/工作/编程/前端/projext/project/src/services/apis.js"],"sourcesContent":["import {createApi, fetchBaseQuery} from \"@reduxjs/toolkit/query/react\";\r\n\r\n// 创建用户相关数据api对象\r\nconst userApi = createApi({\r\n\treducerPath: 'userApis',\r\n\tbaseQuery: fetchBaseQuery({\r\n\t\tbaseUrl: 'http://localhost:1337/api/',\r\n\t\t// prepareHeaders: ,\r\n\t}),\r\n\tendpoints(build) {\r\n\t\treturn {\r\n\t\t\t// 注册\r\n\t\t\tregisterUser: build.mutation({\r\n\t\t\t\tquery(user) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: 'clients',\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tbody: {data: user.attributes}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// 查询用户\r\n\t\t\tfindUser: build.query({\r\n\t\t\t\tquery(token) {\r\n\t\t\t\t\treturn `clients/${token}`\r\n\t\t\t\t},\r\n\t\t\t\ttransformResponse(baseQueryReturnValue, meta, arg) {\r\n\t\t\t\t\t// console.log(baseQueryReturnValue)\r\n\t\t\t\t\treturn baseQueryReturnValue;\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\t// 更新用户\r\n\t\t\tupdateUser: build.mutation({\r\n\t\t\t\tquery() {\r\n\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t//\t创建问题\r\n\t\t\tcreateQue: build.mutation({\r\n\t\t\t\tquery(que) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: 'quests',\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tbody: {data: que.attributes}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// 修改问题\r\n\t\t\tupdateQue: build.mutation({\r\n\t\t\t\tquery(documentId, que) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: `quests/${documentId}`,\r\n\t\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\t\tbody: {data: que.attributes}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// 删除问题\r\n\t\t\tdelQue: build.mutation({\r\n\t\t\t\tquery(documentId) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: `quests/${documentId}`,\r\n\t\t\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// 创建问卷\r\n\t\t\tsaveSurvey: build.mutation({\r\n\t\t\t\tquery(survey) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: 'surveys',\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tbody: {data: survey.attributes}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// 更新问卷\r\n\t\t\tupdateSurvey: build.mutation({\r\n\t\t\t\tquery(survey) {\r\n\t\t\t\t\tconst surveyId = sessionStorage.getItem('tempSurveyToken');\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: `surveys/${surveyId}`,\r\n\t\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\t\tbody: {data: survey.attributes}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n});\r\n\r\n\r\n// 暴露钩子函数\r\nexport const {\r\n\tuseRegisterUserMutation,\r\n\tuseFindUserQuery,\r\n\tuseCreateQueMutation,\r\n\tuseUpdateQueMutation,\r\n\tuseDelQueMutation,\r\n\tuseSaveSurveyMutation,\r\n\tuseUpdateSurveyMutation,\r\n} = userApi;\r\nexport default userApi;\r\n\r\n\r\nexport async function updateUser(updateElement, newElement) {\r\n\tconst clientDocumentId = localStorage.getItem('token');\r\n\tconst url = `http://localhost:1337/api/clients/${clientDocumentId}`;\r\n\t// 先获取用户数据\r\n\tconst data = await (async function () {\r\n\t\ttry {\r\n\t\t\tconst resp = await fetch(url);\r\n\t\t\tif (!resp.ok) {\r\n\t\t\t\tthrow new Error(`获取数据失败: ${resp.status}`);\r\n\t\t\t}\r\n\t\t\treturn await resp.json();\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t})();\r\n\tconsole.log(data);\r\n\t// 更新用户数据\r\n\tswitch (updateElement) {\r\n\t\tcase 'username':\r\n\t\tcase 'pwd': {\r\n\t\t\ttry {\r\n\t\t\t\tconst resp = await fetch(url, {\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\t\t// 仅更新需要更新的数据\r\n\t\t\t\t\tbody: JSON.stringify({data: {[updateElement]: newElement}})\r\n\t\t\t\t});\r\n\t\t\t\tif (!resp.ok) {\r\n\t\t\t\t\tthrow new Error(`更新 ${updateElement} 失败: ${resp.status}`);\r\n\t\t\t\t}\r\n\t\t\t\tconst updated = await resp.json();\r\n\t\t\t\tconsole.log('更新用户数据成功', updated);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'surveys':\r\n\t\tcase 'answers': {\r\n\t\t\tconst last = data?.data?.[updateElement];\r\n\t\t\tconst lastNull = last == null;\r\n\t\t\ttry {\r\n\t\t\t\tconst resp = await fetch(url, {\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\t\t// 根据原本是否有数据进行更新\r\n\t\t\t\t\tbody: JSON.stringify({data: {[updateElement]: !lastNull?[...last, newElement]:[newElement]}})\r\n\t\t\t\t});\r\n\t\t\t\tif (!resp.ok) {\r\n\t\t\t\t\tthrow new Error(`更新 ${updateElement} 失败: ${resp.status}`);\r\n\t\t\t\t}\r\n\t\t\t\tconst updated = await resp.json();\r\n\t\t\t\tconsole.log('更新用户数据成功', updated);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}