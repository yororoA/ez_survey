{"ast":null,"code":"/*\r\n* 更新用户数据(push)\r\n* @updateElement: 需要更新的数据:string, 'username','pwd','surveys','answers'\r\n* @newElement: string, 对于 username/pwd: 更新后的数据, 对于 surveys/answers: 需要添加的数据id\r\n* */\nimport { getUserData } from \"./getUserData\";\nexport async function updateUser(updateElement, newElement) {\n  const clientDocumentId = localStorage.getItem('token');\n  const url = `http://localhost:1337/api/clients/${clientDocumentId}`;\n  // 先获取用户数据\n  const data = await getUserData();\n  // 更新用户数据\n  switch (updateElement) {\n    case 'username':\n    case 'pwd':\n      {\n        try {\n          const resp = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            // 仅更新需要更新的数据\n            body: JSON.stringify({\n              data: {\n                [updateElement]: newElement\n              }\n            })\n          });\n          if (!resp.ok) {\n            throw new Error(`更新 ${updateElement} 失败: ${resp.status}`);\n          }\n          const updated = await resp.json();\n          console.log('更新用户数据成功', updated);\n        } catch (err) {\n          console.error(err);\n        }\n        break;\n      }\n    case 'surveys':\n    case 'answers':\n      {\n        var _data$data;\n        const last = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data[updateElement];\n        const lastNull = last == null;\n        try {\n          const resp = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            // 根据原本是否有数据进行更新\n            body: JSON.stringify({\n              data: {\n                [updateElement]: !lastNull ? [...last, newElement] : [newElement]\n              }\n            })\n          });\n          if (!resp.ok) {\n            throw new Error(`更新 ${updateElement} 失败: ${resp.status}`);\n          }\n          const updated = await resp.json();\n          console.log('更新用户数据成功', updated);\n        } catch (err) {\n          console.error(err);\n        }\n        break;\n      }\n  }\n}","map":{"version":3,"names":["getUserData","updateUser","updateElement","newElement","clientDocumentId","localStorage","getItem","url","data","resp","fetch","method","headers","body","JSON","stringify","ok","Error","status","updated","json","console","log","err","error","_data$data","last","lastNull"],"sources":["E:/Desktop/桌面/工作/编程/前端/projext/project/src/utils/updateUser.js"],"sourcesContent":["/*\r\n* 更新用户数据(push)\r\n* @updateElement: 需要更新的数据:string, 'username','pwd','surveys','answers'\r\n* @newElement: string, 对于 username/pwd: 更新后的数据, 对于 surveys/answers: 需要添加的数据id\r\n* */\r\nimport {getUserData} from \"./getUserData\";\r\n\r\nexport async function updateUser(updateElement, newElement) {\r\n\tconst clientDocumentId = localStorage.getItem('token');\r\n\tconst url = `http://localhost:1337/api/clients/${clientDocumentId}`;\r\n\t// 先获取用户数据\r\n\tconst data = await getUserData();\r\n\t// 更新用户数据\r\n\tswitch (updateElement) {\r\n\t\tcase 'username':\r\n\t\tcase 'pwd': {\r\n\t\t\ttry {\r\n\t\t\t\tconst resp = await fetch(url, {\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\t\t// 仅更新需要更新的数据\r\n\t\t\t\t\tbody: JSON.stringify({data: {[updateElement]: newElement}})\r\n\t\t\t\t});\r\n\t\t\t\tif (!resp.ok) {\r\n\t\t\t\t\tthrow new Error(`更新 ${updateElement} 失败: ${resp.status}`);\r\n\t\t\t\t}\r\n\t\t\t\tconst updated = await resp.json();\r\n\t\t\t\tconsole.log('更新用户数据成功', updated);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'surveys':\r\n\t\tcase 'answers': {\r\n\t\t\tconst last = data?.data?.[updateElement];\r\n\t\t\tconst lastNull = last == null;\r\n\t\t\ttry {\r\n\t\t\t\tconst resp = await fetch(url, {\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\t\t// 根据原本是否有数据进行更新\r\n\t\t\t\t\tbody: JSON.stringify({data: {[updateElement]: !lastNull ? [...last, newElement] : [newElement]}})\r\n\t\t\t\t});\r\n\t\t\t\tif (!resp.ok) {\r\n\t\t\t\t\tthrow new Error(`更新 ${updateElement} 失败: ${resp.status}`);\r\n\t\t\t\t}\r\n\t\t\t\tconst updated = await resp.json();\r\n\t\t\t\tconsole.log('更新用户数据成功', updated);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,WAAW,QAAO,eAAe;AAEzC,OAAO,eAAeC,UAAUA,CAACC,aAAa,EAAEC,UAAU,EAAE;EAC3D,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtD,MAAMC,GAAG,GAAG,qCAAqCH,gBAAgB,EAAE;EACnE;EACA,MAAMI,IAAI,GAAG,MAAMR,WAAW,CAAC,CAAC;EAChC;EACA,QAAQE,aAAa;IACpB,KAAK,UAAU;IACf,KAAK,KAAK;MAAE;QACX,IAAI;UACH,MAAMO,IAAI,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;YAC7BI,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAC,cAAc,EAAE;YAAkB,CAAC;YAC7C;YACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAACP,IAAI,EAAE;gBAAC,CAACN,aAAa,GAAGC;cAAU;YAAC,CAAC;UAC3D,CAAC,CAAC;UACF,IAAI,CAACM,IAAI,CAACO,EAAE,EAAE;YACb,MAAM,IAAIC,KAAK,CAAC,MAAMf,aAAa,QAAQO,IAAI,CAACS,MAAM,EAAE,CAAC;UAC1D;UACA,MAAMC,OAAO,GAAG,MAAMV,IAAI,CAACW,IAAI,CAAC,CAAC;UACjCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,OAAO,CAAC;QACjC,CAAC,CAAC,OAAOI,GAAG,EAAE;UACbF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;QACnB;QACA;MACD;IACA,KAAK,SAAS;IACd,KAAK,SAAS;MAAE;QAAA,IAAAE,UAAA;QACf,MAAMC,IAAI,GAAGlB,IAAI,aAAJA,IAAI,wBAAAiB,UAAA,GAAJjB,IAAI,CAAEA,IAAI,cAAAiB,UAAA,uBAAVA,UAAA,CAAavB,aAAa,CAAC;QACxC,MAAMyB,QAAQ,GAAGD,IAAI,IAAI,IAAI;QAC7B,IAAI;UACH,MAAMjB,IAAI,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;YAC7BI,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAC,cAAc,EAAE;YAAkB,CAAC;YAC7C;YACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAACP,IAAI,EAAE;gBAAC,CAACN,aAAa,GAAG,CAACyB,QAAQ,GAAG,CAAC,GAAGD,IAAI,EAAEvB,UAAU,CAAC,GAAG,CAACA,UAAU;cAAC;YAAC,CAAC;UACjG,CAAC,CAAC;UACF,IAAI,CAACM,IAAI,CAACO,EAAE,EAAE;YACb,MAAM,IAAIC,KAAK,CAAC,MAAMf,aAAa,QAAQO,IAAI,CAACS,MAAM,EAAE,CAAC;UAC1D;UACA,MAAMC,OAAO,GAAG,MAAMV,IAAI,CAACW,IAAI,CAAC,CAAC;UACjCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,OAAO,CAAC;QACjC,CAAC,CAAC,OAAOI,GAAG,EAAE;UACbF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;QACnB;QACA;MACD;EACD;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}