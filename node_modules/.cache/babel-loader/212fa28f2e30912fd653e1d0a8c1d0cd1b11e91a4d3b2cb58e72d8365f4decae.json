{"ast":null,"code":"var _jsxFileName = \"E:\\\\Desktop\\\\\\u684C\\u9762\\\\\\u5DE5\\u4F5C\\\\\\u7F16\\u7A0B\\\\\\u524D\\u7AEF\\\\projext\\\\project\\\\src\\\\components\\\\check&fill\\\\renderFillSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { RenderFillContext } from \"./context/renderFillContext\";\nimport { getQueDetails } from \"../../utils/getUserSurveys\";\nimport { quesDisplay } from \"./quesDisplay/quesDisplay\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SubmitCheckEmptyContext } from \"./context/submitCheckEmptyContext\";\nimport { updateAnswer } from \"../../utils/updateAnswer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenderFillSurvey = ({\n  surveyId\n}) => {\n  _s();\n  const surveyDetails = useContext(RenderFillContext).surveyData;\n  const navigate = useNavigate();\n\n  // 获取问卷对应questionsDetail\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    setQuestions([]);\n    const getQues = async () => {\n      // 创建所有请求的Promise数组\n      const getQuesPromise = surveyDetails.questions.map(question => {\n        return getQueDetails(question);\n      });\n      // 等待所有promise完成, 获取结果数组\n      const results = await Promise.all(getQuesPromise);\n      // 一次性更新questions\n      const sortedQues = results.sort((a, b) => a.index - b.index);\n      setQuestions(sortedQues);\n    };\n    getQues();\n  }, [surveyDetails]);\n\n  // 监控questions变化\n  useEffect(() => {\n    console.log('questions:----', questions);\n  }, [questions]);\n\n  // 获取需要渲染的问题组件\n  const elements = quesDisplay(questions);\n\n  // 取消填写问卷, 返回首页, 清空填写问卷时产生的 sessionStorage\n  const handleCancel = useCallback(e => {\n    e.preventDefault();\n    sessionStorage.clear();\n    alert('填写的信息将会消失');\n    navigate('../../published');\n  }, [surveyDetails]);\n\n  // 检查是否全部填写\n  const [allCompleted, setAllCompleted] = useState(false);\n  const tendToSubmit = useRef(false);\n  /*传递给每个问题组件的检查函数, 当存在任意一个组件未传递答案时, 设置allCompleted为false\r\n  * @return bool, 该题是否完成填写\r\n  * @accept`title` 问题标题\r\n  * @accept`type` 问题类型*/\n  const checkCompleted = useCallback((title, type) => {\n    const data = JSON.parse(sessionStorage.getItem(title));\n    switch (type) {\n      case 'text':\n      case 'location':\n      case 'single':\n      case 'checkbox':\n        {\n          if (data.answer.length === 0) {\n            alert(`${title} 还没填就想交卷?`);\n            setAllCompleted(false);\n            tendToSubmit.current = false;\n            return false;\n          }\n          return true;\n        }\n      case 'slider':\n      case 'rating':\n        {\n          if (data.answer < 0) {\n            alert(`${title} 不许打负分!`);\n            setAllCompleted(false);\n            tendToSubmit.current = false;\n            return false;\n          }\n          return true;\n        }\n      default:\n        {\n          setAllCompleted(true);\n          tendToSubmit.current = false;\n          return true;\n        }\n    }\n  }, [surveyDetails]);\n  // 用于控制是否将检查函数传递给问题组件\n  const submit = useCallback(async e => {\n    e.preventDefault();\n    setTendToSubmit(true);\n  }, [surveyDetails]);\n  // 提交填写的问卷, 返回involved, 清空填写问卷产生的 sessionStorage\n  const handleSubmit = useCallback(async () => {\n    await updateAnswer(surveyId);\n    navigate('../../involved');\n  }, [surveyDetails]);\n  // 处理提交逻辑\n  useEffect(() => {\n    async function submit() {\n      if (allCompleted && tendToSubmit) {\n        await handleSubmit();\n      }\n    }\n    submit();\n  }, [allCompleted, tendToSubmit]);\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: surveyDetails.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: surveyDetails.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(SubmitCheckEmptyContext.Provider, {\n      value: checkCompleted,\n      children: elements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCancel,\n      children: '取消填写'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      children: '提交'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n};\n_s(RenderFillSurvey, \"Pjofxzgu9Q4Zd6ETfVl6oUi6+sA=\", false, function () {\n  return [useNavigate];\n});\n_c = RenderFillSurvey;\nexport default RenderFillSurvey;\nvar _c;\n$RefreshReg$(_c, \"RenderFillSurvey\");","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useRef","useState","RenderFillContext","getQueDetails","quesDisplay","useNavigate","SubmitCheckEmptyContext","updateAnswer","jsxDEV","_jsxDEV","RenderFillSurvey","surveyId","_s","surveyDetails","surveyData","navigate","questions","setQuestions","getQues","getQuesPromise","map","question","results","Promise","all","sortedQues","sort","a","b","index","console","log","elements","handleCancel","e","preventDefault","sessionStorage","clear","alert","allCompleted","setAllCompleted","tendToSubmit","checkCompleted","title","type","data","JSON","parse","getItem","answer","length","current","submit","setTendToSubmit","handleSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","description","Provider","value","onClick","_c","$RefreshReg$"],"sources":["E:/Desktop/桌面/工作/编程/前端/projext/project/src/components/check&fill/renderFillSurvey.jsx"],"sourcesContent":["import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';\r\nimport {RenderFillContext} from \"./context/renderFillContext\";\r\nimport {getQueDetails} from \"../../utils/getUserSurveys\";\r\nimport {quesDisplay} from \"./quesDisplay/quesDisplay\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {SubmitCheckEmptyContext} from \"./context/submitCheckEmptyContext\";\r\nimport {updateAnswer} from \"../../utils/updateAnswer\";\r\n\r\nconst RenderFillSurvey = ({surveyId}) => {\r\n\tconst surveyDetails = useContext(RenderFillContext).surveyData;\r\n\tconst navigate = useNavigate();\r\n\r\n\t// 获取问卷对应questionsDetail\r\n\tconst [questions, setQuestions] = useState([]);\r\n\tuseEffect(() => {\r\n\t\tsetQuestions([]);\r\n\t\tconst getQues = async () => {\r\n\t\t\t// 创建所有请求的Promise数组\r\n\t\t\tconst getQuesPromise = surveyDetails.questions.map(question => {\r\n\t\t\t\treturn getQueDetails(question);\r\n\t\t\t});\r\n\t\t\t// 等待所有promise完成, 获取结果数组\r\n\t\t\tconst results = await Promise.all(getQuesPromise);\r\n\t\t\t// 一次性更新questions\r\n\t\t\tconst sortedQues = results.sort((a, b) => a.index - b.index);\r\n\t\t\tsetQuestions(sortedQues);\r\n\t\t}\r\n\t\tgetQues();\r\n\t}, [surveyDetails]);\r\n\r\n\t// 监控questions变化\r\n\tuseEffect(() => {\r\n\t\tconsole.log('questions:----', questions);\r\n\t}, [questions]);\r\n\r\n\t// 获取需要渲染的问题组件\r\n\tconst elements = quesDisplay(questions);\r\n\r\n\r\n\t// 取消填写问卷, 返回首页, 清空填写问卷时产生的 sessionStorage\r\n\tconst handleCancel = useCallback(e => {\r\n\t\te.preventDefault();\r\n\t\tsessionStorage.clear();\r\n\t\talert('填写的信息将会消失');\r\n\t\tnavigate('../../published');\r\n\t}, [surveyDetails]);\r\n\r\n\r\n\t// 检查是否全部填写\r\n\tconst [allCompleted, setAllCompleted] = useState(false);\r\n\tconst tendToSubmit = useRef(false);\r\n\t/*传递给每个问题组件的检查函数, 当存在任意一个组件未传递答案时, 设置allCompleted为false\r\n\t* @return bool, 该题是否完成填写\r\n\t* @accept`title` 问题标题\r\n\t* @accept`type` 问题类型*/\r\n\tconst checkCompleted = useCallback((title, type) => {\r\n\t\tconst data = JSON.parse(sessionStorage.getItem(title));\r\n\t\tswitch (type) {\r\n\t\t\tcase 'text':\r\n\t\t\tcase 'location':\r\n\t\t\tcase 'single':\r\n\t\t\tcase 'checkbox': {\r\n\t\t\t\tif (data.answer.length === 0) {\r\n\t\t\t\t\talert(`${title} 还没填就想交卷?`);\r\n\t\t\t\t\tsetAllCompleted(false);\r\n\t\t\t\t\ttendToSubmit.current = false;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tcase 'slider':\r\n\t\t\tcase 'rating': {\r\n\t\t\t\tif (data.answer < 0) {\r\n\t\t\t\t\talert(`${title} 不许打负分!`);\r\n\t\t\t\t\tsetAllCompleted(false);\r\n\t\t\t\t\ttendToSubmit.current = false\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\tsetAllCompleted(true);\r\n\t\t\t\ttendToSubmit.current = false;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}, [surveyDetails]);\r\n\t// 用于控制是否将检查函数传递给问题组件\r\n\tconst submit = useCallback(async (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetTendToSubmit(true);\r\n\t}, [surveyDetails]);\r\n\t// 提交填写的问卷, 返回involved, 清空填写问卷产生的 sessionStorage\r\n\tconst handleSubmit = useCallback(async () => {\r\n\t\tawait updateAnswer(surveyId)\r\n\t\tnavigate('../../involved');\r\n\t}, [surveyDetails]);\r\n\t// 处理提交逻辑\r\n\tuseEffect(() => {\r\n\t\tasync function submit() {\r\n\t\t\tif (allCompleted && tendToSubmit) {\r\n\t\t\t\tawait handleSubmit();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsubmit();\r\n\t}, [allCompleted, tendToSubmit])\r\n\r\n\r\n\treturn (\r\n\t\t<fieldset>\r\n\t\t\t<h1>{surveyDetails.title}</h1>\r\n\t\t\t<h2>{surveyDetails.description}</h2>\r\n\t\t\t<hr/>\r\n\t\t\t<SubmitCheckEmptyContext.Provider value={checkCompleted}>\r\n\t\t\t\t{elements}\r\n\t\t\t</SubmitCheckEmptyContext.Provider>\r\n\t\t\t<button onClick={handleCancel}>{'取消填写'}</button>\r\n\t\t\t<button onClick={submit}>{'提交'}</button>\r\n\t\t</fieldset>\r\n\t);\r\n};\r\n\r\nexport default RenderFillSurvey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}